# coding: utf-8

# <codecell>
import numpy as np
from numpy.linalg import svd, matrix_rank
import pandas as pd
import matplotlib.pyplot as plt
from IPython import get_ipython
from util import (
    svdcomp,
    nextplot,
    plot_matrix,
    plot_xy,
    plot_cov,
    match_categories,
)  # see util.py
from sklearn.cluster import KMeans

get_ipython().magic("matplotlib")

# <markdowncell>
# # 1 Intuition on SVD

# <codecell>
M1 = np.array(
    [
        [1, 1, 1, 0, 0],
        [1, 1, 1, 0, 0],
        [1, 1, 1, 0, 0],
        [0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0],
    ]
)

M2 = np.array(
    [
        [0, 0, 0, 0, 0],
        [0, 2, 1, 2, 0],
        [0, 2, 1, 2, 0],
        [0, 2, 1, 2, 0],
        [0, 0, 0, 0, 0],
    ]
)

M3 = np.array([[0, 0, 0, 0], [0, 1, 1, 1], [0, 1, 1, 1], [0, 1, 1, 1], [0, 1, 1, 1]])

M4 = np.array(
    [
        [1, 1, 1, 0, 0],
        [1, 1, 1, 0, 0],
        [1, 1, 1, 0, 0],
        [0, 0, 0, 1, 1],
        [0, 0, 0, 1, 1],
    ]
)

M5 = np.array(
    [
        [1, 1, 1, 0, 0],
        [1, 1, 1, 0, 0],
        [1, 1, 1, 1, 1],
        [0, 0, 1, 1, 1],
        [0, 0, 1, 1, 1],
    ]
)

M6 = np.array(
    [
        [1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1],
        [1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1],
    ]
)


# <markdowncell>
# ## 1a

# <codecell>
# YOUR PART

# <markdowncell>
# ## 1b

# <codecell>
# YOUR PART

# <markdowncell>
# ## 1c

# <codecell>
# You can use the functions svdcomp and plot_matrix from util.py
# YOUR PART

# <markdowncell>
# ## 1d

# <codecell>
# Another method to compute the rank is matrix_rank.
# YOUR PART

# <markdowncell>
# # 2 The SVD on Weather Data

# <codecell>
# Load the data
climate = pd.read_csv("data/worldclim.csv")
coord = pd.read_csv("data/worldclim_coordinates.csv")
lon = coord["lon"]
lat = coord["lat"]

# <codecell>
# Plot the coordinates
plot_xy(lon, lat)


# <markdowncell>
# ## 2a
# <codecell>
# YOUR PART
# Normalize the data to z-scores. Store the result in X.

# <codecell>
# Plot histograms of attributes
nextplot()
X.hist(ax=plt.gca())

# <markdowncell>
# ## 2b

# <codecell>
# Compute the SVD of the normalized climate data and store it in variables U,s,Vt. What
# is the rank of the data?
# YOUR PART

# <markdowncell>
# ## 2c

# <codecell>
# Here is an example plot.
plot_xy(lon, lat, U[:, 0])

# <codecell>
# For interpretation, it may also help to look at the other component matrices and
# perhaps use other plot functions (e.g., plot_matrix).
# YOUR PART

# <markdowncell>
# ## 2d

# <codecell>
# Here is an example.
plot_xy(U[:, 0], U[:, 1], lat - np.mean(lat))


# <markdowncell>
# ## 2e

# <codecell>
# 2e(i) Guttman-Kaiser
# YOUR PART

# <codecell>
# 2e(ii) 90% squared Frobenius norm
# YOUR PART

# <codecell>
# 2e(iv) entropy
# YOUR PART

# <codecell>
# 2e(v) random flips
# Random sign matrix: np.random.choice([-1,1], X.shape)
# YOUR PART

# <codecell>
# 2e What, if any, of these would be your choice?
# YOUR PART

# <markdowncell>
# ## 2f

# <codecell>
# Here is the empty plot that you need to fill (one line per choice of k: RSME between
# original X and the reconstruction from size-k SVD of noisy versions)
# YOUR PART
nextplot()
plt.plot()
plt.xlabel(r"Noise level ($\epsilon$)")
plt.ylabel("Reconstruction RMSE vs. original data")

# <markdowncell>
# # 3 SVD and k-means

# <codecell>
# Cluster the normalized climate data into 5 clusters using k-means and store
# the vector giving the cluster labels for each location.
X_clusters = KMeans(5).fit(X).labels_

# <markdowncell>
# ## 3a

# <codecell>
# Plot the results to the map: use the cluster labels to give the color to each
# point.
plot_xy(lon, lat, X_clusters)

# <markdowncell>
# ## 3b

# <codecell>
# YOUR PART HERE

# <markdowncell>
# ## 3c

# <codecell>
# Compute the PCA scores, store in Z (of shape N x k)
k = 2
# YOUR PART HERE

# <codecell>
# cluster and visualize
Z_clusters = KMeans(5).fit(Z).labels_
# match clusters as well as possible (try without)
Z_clusters = match_categories(X_clusters, Z_clusters)
nextplot()
axs = plt.gcf().subplots(1, 2)
plot_xy(lon, lat, X_clusters, axis=axs[0])
axs[0].set_title("Original data")
plot_xy(lon, lat, Z_clusters, axis=axs[1])
axs[1].set_title(f"PCA $(k={k}$)")

